version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"   
      - "15672:15672" 
    healthcheck:
      test: rabbitmq-diagnostics check_port_listener 5672
      interval: 5s
      timeout: 15s
      start_period: 20s 
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: user     
      RABBITMQ_DEFAULT_PASS: password 
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq   
    networks:
       - network_test

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongodb_data:/data/db  
   
    networks:
      -  network_test 
  front:
    build: 
      context: ./front
      dockerfile: Dockerfile
    container_name: front
    ports:
      - 8000:80
    networks:
      - network_test

  server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: server
    ports:
      - 3000:3000
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["/bin/sh", "-c", "npm run prod && npm start"]
    environment:
      NODE_ENV: production            
      MONGO_URI: mongodb://mongodb:27017/goop
      MONGO_DB_NAME : goop
      RABBITMQ_URL: amqp://user:password@rabbitmq
      API_PORT: 3000         
    networks:
      -  network_test
  
volumes:
  rabbitmq-data:
  mongodb_data:

networks:
  network_test:
    driver: bridge
